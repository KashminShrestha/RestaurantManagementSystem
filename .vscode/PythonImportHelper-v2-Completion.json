[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True if os.getenv(\"DEBUG\") == \"True\" else False\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS = []",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True if os.getenv(\"DEBUG\") == \"True\" else False\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = True if os.getenv(\"DEBUG\") == \"True\" else False\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"restaurant\",\n    \"rest_framework\",\n    # 'snippets',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = \"project.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = \"project.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": os.getenv(\"DATABASE_ENGINE\"),\n        \"NAME\": os.getenv(\"DATABASE_NAME\"),\n        \"USER\": os.getenv(\"DATABASE_USER\"),\n        \"PASSWORD\": os.getenv(\"DATABASE_PASSWORD\"),\n        \"HOST\": os.getenv(\"DATABASE_HOST\"),",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": os.getenv(\"DATABASE_ENGINE\"),\n        \"NAME\": os.getenv(\"DATABASE_NAME\"),\n        \"USER\": os.getenv(\"DATABASE_USER\"),\n        \"PASSWORD\": os.getenv(\"DATABASE_PASSWORD\"),\n        \"HOST\": os.getenv(\"DATABASE_HOST\"),\n        \"PORT\": os.getenv(\"DATABASE_PORT\"),\n    }\n}",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Restaurant API\",\n        default_version=\"v1\",\n        description=\"Token 2c9759d8b36da7eed99b552c6e01192de27f5dfb\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@snippets.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    # path(\"api/\", include(\"core.urls\")),\n    path(\"__debug__/\", include(\"debug_toolbar.urls\")),\n    path(\"api/\", include(\"restaurant.urls\")),\n    path(\n        \"swagger<format>/\", schema_view.without_ui(cache_timeout=0), name=\"schema-json\"\n    ),\n    path(\n        \"swagger/\",",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "restaurant.migrations.0001_initial",
        "description": "restaurant.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "restaurant.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "restaurant.migrations.0002_alter_bill_total_amount_alter_menu_price_and_more",
        "description": "restaurant.migrations.0002_alter_bill_total_amount_alter_menu_price_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('restaurant', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bill',\n            name='total_amount',\n            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)]),\n        ),",
        "detail": "restaurant.migrations.0002_alter_bill_total_amount_alter_menu_price_and_more",
        "documentation": {}
    },
    {
        "label": "TableAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class TableAdmin(admin.ModelAdmin):\n    list_display = [\"number\", \"capacity\", \"status\"]\n    list_filter = [\"status\"]\n    search_fields = [\"number\"]\n    list_per_page = 20\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = [\"name\"]\n    search_fields = [\"name\"]\n    list_per_page = 20",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = [\"name\"]\n    search_fields = [\"name\"]\n    list_per_page = 20\n@admin.register(Menu)\nclass MenuAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"price\", \"category\"]\n    list_filter = [\"category\"]\n    search_fields = [\"name\", \"category__name\"]\n    autocomplete_fields = [\"category\"]",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "MenuAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class MenuAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"price\", \"category\"]\n    list_filter = [\"category\"]\n    search_fields = [\"name\", \"category__name\"]\n    autocomplete_fields = [\"category\"]\n    list_per_page = 20\n@admin.register(Waiter)\nclass WaiterAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"age\"]\n    list_per_page = 20",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "WaiterAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class WaiterAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"age\"]\n    list_per_page = 20\n@admin.register(Reception)\nclass ReceptionAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"contact_number\"]\n    list_per_page = 20\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = [\"table\", \"waiter\"]",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "ReceptionAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class ReceptionAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"contact_number\"]\n    list_per_page = 20\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = [\"table\", \"waiter\"]\n    list_filter = [\"waiter\"]\n    search_fields = [\"table__number\", \"waiter__name\"]\n    list_per_page = 20\n@admin.register(Bill)",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = [\"table\", \"waiter\"]\n    list_filter = [\"waiter\"]\n    search_fields = [\"table__number\", \"waiter__name\"]\n    list_per_page = 20\n@admin.register(Bill)\nclass BillAdmin(admin.ModelAdmin):\n    list_display = [\"order\", \"total_amount\", \"is_paid\"]\n    list_filter = [\"is_paid\"]\n    search_fields = [\"order__id\"]",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "BillAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class BillAdmin(admin.ModelAdmin):\n    list_display = [\"order\", \"total_amount\", \"is_paid\"]\n    list_filter = [\"is_paid\"]\n    search_fields = [\"order__id\"]\n    list_per_page = 20\n@admin.register(Reservation)\nclass ReservationAdmin(admin.ModelAdmin):\n    list_display = [\n        \"table\",\n        \"customer_name\",",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "ReservationAdmin",
        "kind": 6,
        "importPath": "restaurant.admin",
        "description": "restaurant.admin",
        "peekOfCode": "class ReservationAdmin(admin.ModelAdmin):\n    list_display = [\n        \"table\",\n        \"customer_name\",\n        \"reservation_time\",\n        \"is_confirmed\",\n    ]\n    list_filter = [\"is_confirmed\"]\n    search_fields = [\"table__number\", \"customer_name\"]\n    list_per_page = 20",
        "detail": "restaurant.admin",
        "documentation": {}
    },
    {
        "label": "RestaurantConfig",
        "kind": 6,
        "importPath": "restaurant.apps",
        "description": "restaurant.apps",
        "peekOfCode": "class RestaurantConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'restaurant'",
        "detail": "restaurant.apps",
        "documentation": {}
    },
    {
        "label": "SharedModel",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class SharedModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\n# Table model\nclass Table(SharedModel):\n    STATUS_CHOICES = [\n        (\"Available\", \"Available\"),\n        (\"Reserved\", \"Reserved\"),",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Table(SharedModel):\n    STATUS_CHOICES = [\n        (\"Available\", \"Available\"),\n        (\"Reserved\", \"Reserved\"),\n        (\"Occupied\", \"Occupied\"),\n    ]\n    number = models.IntegerField(\n        unique=True,\n        validators=[MinValueValidator(1)],  # Ensures the table number is positive\n    )",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Category(SharedModel):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\n# Menu model\nclass Menu(SharedModel):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(\n        max_digits=5,\n        decimal_places=2,",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Menu(SharedModel):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(\n        max_digits=5,\n        decimal_places=2,\n        validators=[MinValueValidator(0.01)],  # Ensures the price is positive\n    )\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.name",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Waiter",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Waiter(SharedModel):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(\n        validators=[MinValueValidator(1)]  # Ensures age is positive\n    )\n    def __str__(self):\n        return self.name\n# Reception model\nclass Reception(SharedModel):\n    name = models.CharField(max_length=100)",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Reception",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Reception(SharedModel):\n    name = models.CharField(max_length=100)\n    contact_number = models.CharField(max_length=15)\n    def __str__(self):\n        return self.name\n# Order model\nclass Order(SharedModel):\n    table = models.ForeignKey(Table, on_delete=models.CASCADE)\n    menu_items = models.ManyToManyField(\"Menu\")\n    waiter = models.ForeignKey(\"Waiter\", on_delete=models.CASCADE)",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Order(SharedModel):\n    table = models.ForeignKey(Table, on_delete=models.CASCADE)\n    menu_items = models.ManyToManyField(\"Menu\")\n    waiter = models.ForeignKey(\"Waiter\", on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"Order {self.id} at Table {self.table.number}\"\n# Bill model\nclass Bill(SharedModel):\n    order = models.OneToOneField(\"Order\", on_delete=models.CASCADE)\n    total_amount = models.DecimalField(",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Bill",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Bill(SharedModel):\n    order = models.OneToOneField(\"Order\", on_delete=models.CASCADE)\n    total_amount = models.DecimalField(\n        max_digits=10,\n        decimal_places=2,\n        validators=[MinValueValidator(0.01)],  # Ensures the total amount is positive\n    )\n    is_paid = models.BooleanField(default=False)\n    def pay_bill(self):\n        self.is_paid = True",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "Reservation",
        "kind": 6,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "class Reservation(SharedModel):\n    table = models.ForeignKey(Table, on_delete=models.CASCADE)\n    customer_name = models.CharField(max_length=100)\n    reservation_time = models.DateTimeField()\n    is_confirmed = models.BooleanField(default=False)\n    def reserve_table(self):\n        self.table.status = \"Reserved\"\n        self.table.save()",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "restaurant.models",
        "description": "restaurant.models",
        "peekOfCode": "User = get_user_model()\n# Assuming User is the model name for Django's built-in User model\n# Create your models here.\n# Abstract base class for shared fields\nclass SharedModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\n# Table model",
        "detail": "restaurant.models",
        "documentation": {}
    },
    {
        "label": "MenuPagination",
        "kind": 6,
        "importPath": "restaurant.paginations",
        "description": "restaurant.paginations",
        "peekOfCode": "class MenuPagination(PageNumberPagination):\n    page_size = 10\n    page_size_query_param = \"size\"",
        "detail": "restaurant.paginations",
        "documentation": {}
    },
    {
        "label": "TableSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class TableSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Table\n        fields = [\n            \"id\",\n            \"number\",\n            \"capacity\",\n            \"status\",\n            \"created_at\",\n            \"updated_at\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = [\"id\", \"name\", \"created_at\", \"updated_at\"]\nclass MenuSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n    class Meta:\n        model = Menu\n        fields = [\n            \"id\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class MenuSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n    class Meta:\n        model = Menu\n        fields = [\n            \"id\",\n            \"name\",\n            \"price\",\n            \"category\",\n            \"created_at\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "WaiterSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class WaiterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Waiter\n        fields = [\n            \"id\",\n            \"name\",\n            \"age\",\n            \"created_at\",\n            \"updated_at\",\n        ]",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "ReceptionSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class ReceptionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reception\n        fields = [\n            \"id\",\n            \"name\",\n            \"contact_number\",\n            \"created_at\",\n            \"updated_at\",\n        ]",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "OrderSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class OrderSerializer(serializers.ModelSerializer):\n    table = TableSerializer()\n    menu_items = MenuSerializer(many=True)\n    waiter = WaiterSerializer()\n    class Meta:\n        model = Order\n        fields = [\n            \"id\",\n            \"table\",\n            \"menu_items\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "BillSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class BillSerializer(serializers.ModelSerializer):\n    order = OrderSerializer()\n    class Meta:\n        model = Bill\n        fields = [\n            \"id\",\n            \"order\",\n            \"total_amount\",\n            \"is_paid\",\n            \"created_at\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "ReservationSerializer",
        "kind": 6,
        "importPath": "restaurant.serializers",
        "description": "restaurant.serializers",
        "peekOfCode": "class ReservationSerializer(serializers.ModelSerializer):\n    table = serializers.PrimaryKeyRelatedField(queryset=Table.objects.all())\n    capacity = serializers.IntegerField(write_only=True, required=False)\n    class Meta:\n        model = Reservation\n        fields = [\n            \"id\",\n            \"table\",\n            \"customer_name\",\n            \"reservation_time\",",
        "detail": "restaurant.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "restaurant.urls",
        "description": "restaurant.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"Tables\", TableViewSet)\nrouter.register(r\"Categories\", CategoryViewSet)\nrouter.register(r\"Menus\", MenuViewSet)\nrouter.register(r\"Waiters\", WaiterViewSet)\nrouter.register(r\"Receptions\", ReceptionViewSet)\nrouter.register(r\"Orders\", OrderViewSet)\nrouter.register(r\"Bills\", BillViewSet)\nrouter.register(r\"Reservations\", ReservationViewSet)\n# urlpatterns = [",
        "detail": "restaurant.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "restaurant.urls",
        "description": "restaurant.urls",
        "peekOfCode": "urlpatterns = [] + router.urls",
        "detail": "restaurant.urls",
        "documentation": {}
    },
    {
        "label": "TableViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class TableViewSet(viewsets.ModelViewSet):\n    queryset = Table.objects.all()\n    serializer_class = TableSerializer\nclass CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.select_related(\"category\").all()\n    serializer_class = MenuSerializer\nclass WaiterViewSet(viewsets.ModelViewSet):",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.select_related(\"category\").all()\n    serializer_class = MenuSerializer\nclass WaiterViewSet(viewsets.ModelViewSet):\n    queryset = Waiter.objects.all()\n    serializer_class = WaiterSerializer\nclass ReceptionViewSet(viewsets.ModelViewSet):",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "MenuViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.select_related(\"category\").all()\n    serializer_class = MenuSerializer\nclass WaiterViewSet(viewsets.ModelViewSet):\n    queryset = Waiter.objects.all()\n    serializer_class = WaiterSerializer\nclass ReceptionViewSet(viewsets.ModelViewSet):\n    queryset = Reception.objects.all()\n    serializer_class = ReceptionSerializer\nclass OrderViewSet(viewsets.ModelViewSet):",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "WaiterViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class WaiterViewSet(viewsets.ModelViewSet):\n    queryset = Waiter.objects.all()\n    serializer_class = WaiterSerializer\nclass ReceptionViewSet(viewsets.ModelViewSet):\n    queryset = Reception.objects.all()\n    serializer_class = ReceptionSerializer\nclass OrderViewSet(viewsets.ModelViewSet):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n    filter_backends = (filters.DjangoFilterBackend, SearchFilter)",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "ReceptionViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class ReceptionViewSet(viewsets.ModelViewSet):\n    queryset = Reception.objects.all()\n    serializer_class = ReceptionSerializer\nclass OrderViewSet(viewsets.ModelViewSet):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n    filter_backends = (filters.DjangoFilterBackend, SearchFilter)\n    search_fields = [\n        \"table__number\",\n        \"waiter__name\",",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "OrderViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class OrderViewSet(viewsets.ModelViewSet):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n    filter_backends = (filters.DjangoFilterBackend, SearchFilter)\n    search_fields = [\n        \"table__number\",\n        \"waiter__name\",\n    ]\nclass BillViewSet(viewsets.ModelViewSet):\n    queryset = Bill.objects.all()",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "BillViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class BillViewSet(viewsets.ModelViewSet):\n    queryset = Bill.objects.all()\n    serializer_class = BillSerializer\nclass ReservationViewSet(viewsets.ModelViewSet):\n    queryset = Reservation.objects.all()\n    serializer_class = ReservationSerializer\n    @action(detail=False, methods=[\"get\"], url_path=\"available-tables\")\n    def get_available_tables(self, request):\n        capacity = request.query_params.get(\"capacity\", None)\n        if not capacity:",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "ReservationViewSet",
        "kind": 6,
        "importPath": "restaurant.views",
        "description": "restaurant.views",
        "peekOfCode": "class ReservationViewSet(viewsets.ModelViewSet):\n    queryset = Reservation.objects.all()\n    serializer_class = ReservationSerializer\n    @action(detail=False, methods=[\"get\"], url_path=\"available-tables\")\n    def get_available_tables(self, request):\n        capacity = request.query_params.get(\"capacity\", None)\n        if not capacity:\n            return Response(\n                {\"error\": \"Capacity parameter is required.\"},\n                status=status.HTTP_400_BAD_REQUEST,",
        "detail": "restaurant.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]